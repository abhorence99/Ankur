import pandas as pd
import re
import time
import urllib.parse

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def search_apra_amcos(song_title, driver):
    from selenium.common.exceptions import TimeoutException, NoSuchElementException
    import urllib.parse

    encoded_title = urllib.parse.quote_plus(song_title.strip())
    url = f"https://www.apraamcos.com.au/works-search?works=true&title={encoded_title}"
    driver.get(url)

    wait = WebDriverWait(driver, 20)  # Increased wait time
    time.sleep(3)  # Give JS time to render results

    try:
        wait.until(
            EC.any_of(
                EC.presence_of_element_located((By.XPATH, "//h6[contains(text(),'results')]")),
                EC.presence_of_element_located((By.XPATH, "//h2[contains(text(),'Error')]"))
            )
        )

        # Check for error
        try:
            error_heading = driver.find_element(By.XPATH, "//h2[contains(text(),'Error')]")
            return False
        except NoSuchElementException:
            pass  # No error found

        # Check for number of results
        try:
            result_heading = driver.find_element(By.XPATH, "//h6[contains(text(),'results')]")
            match = re.search(r"(\d+)\s+results", result_heading.text, re.IGNORECASE)
            if match and int(match.group(1)) > 0:
                return True
            else:
                return False
        except NoSuchElementException:
            return False

    except TimeoutException:
        print(f"Timeout waiting for page to load for: {song_title}")
        print("Partial page source:\n", driver.page_source[:1000])  # Optional debug
        return None
    except Exception as e:
        print(f"Unexpected error for '{song_title}': {e}")
        return None



def main():
    df = pd.read_excel("songs.xlsx")
    print("Columns in Excel file:", df.columns.tolist())
    titles = df["Title"].dropna().tolist()

    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--log-level=3')
    options.add_experimental_option("excludeSwitches", ["enable-logging"])
    # options.add_argument('--headless')  # Disable headless mode
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)

    service = Service(r"D:\onemusic\chromedriver-win64\chromedriver.exe")
    driver = webdriver.Chrome(service=service, options=options)
    driver.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {
  "source": """
    Object.defineProperty(navigator, 'webdriver', {
      get: () => undefined
    })
  """
})


    results = []
    for title in titles:
        print(f"Searching: {title}")
        found = search_apra_amcos(title, driver)
        results.append((title, found))

    driver.quit()

    result_df = pd.DataFrame(results, columns=["Title", "Found"])
    result_df.to_excel("search_results.xlsx", index=False)
    print("Results saved to 'search_results.xlsx'.")

if __name__ == "__main__":
    main()
